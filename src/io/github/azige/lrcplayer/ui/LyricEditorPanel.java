/*
 * Copyright 2014 Azige.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.github.azige.lrcplayer.ui;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.util.Scanner;
import java.util.SortedSet;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.ListModel;

import io.github.azige.lrcplayer.Lyric;
import io.github.azige.lrcplayer.Lyric.LyricMetaType;
import io.github.azige.lrcplayer.LyricEvent;
import io.github.azige.lrcplayer.LyricTimeStamp;
import io.github.azige.lrcplayer.LyricWriter;

/**
 *
 * @author Azige
 */
public class LyricEditorPanel extends javax.swing.JPanel{

    private static final Logger LOG = Logger.getLogger(LyricEditorPanel.class.getName());
    LyricPlayer lyricPlayer;

    private class FormattedLyricEvent extends LyricEvent{

        public FormattedLyricEvent(LyricTimeStamp timeStamp, String lyric){
            super(timeStamp, lyric);
        }

        @Override
        public String toString(){
            return "[" + getTimeStamp().toString() + "]" + getLyric();
        }
    }

    /**
     * Creates new form LyricListPanel
     */
    public LyricEditorPanel(){
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        lyricList = new javax.swing.JList();
        rawLyricButton = new javax.swing.JButton();
        tagButton = new javax.swing.JButton();
        metaInfoButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        helpButton = new javax.swing.JButton();

        lyricList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lyricListMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(lyricList);

        rawLyricButton.setText("Raw Lyric");
        rawLyricButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rawLyricButtonActionPerformed(evt);
            }
        });

        tagButton.setText("Tag");
        tagButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tagButtonActionPerformed(evt);
            }
        });

        metaInfoButton.setText("Meta Info");
        metaInfoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                metaInfoButtonActionPerformed(evt);
            }
        });

        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        helpButton.setText("Help");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(rawLyricButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tagButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(metaInfoButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(saveButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(helpButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 261, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rawLyricButton)
                    .addComponent(tagButton)
                    .addComponent(metaInfoButton)
                    .addComponent(saveButton)
                    .addComponent(helpButton))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void rawLyricButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rawLyricButtonActionPerformed
        StringWriter buffer = new StringWriter();
        PrintWriter out = new PrintWriter(buffer);
        ListModel<LyricEvent> listModel = lyricList.getModel();
        for (int i = 0; i < listModel.getSize(); i++){
            out.println(listModel.getElementAt(i).getLyric());
        }
        out.close();
        new RawLyricDialog(null, true, buffer.toString(), this::rawLyricCallback).setVisible(true);
    }//GEN-LAST:event_rawLyricButtonActionPerformed

    private void lyricListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lyricListMouseClicked
        if (evt.getClickCount() == 2){
            int index = lyricList.getSelectedIndex();
            if (index > 0){
                lyricPlayer.seek((int)((LyricEvent)lyricList.getModel().getElementAt(index)).getTimeStamp().getMillis() - 3000);
            }else if (index == 0){
                lyricPlayer.seek(0);
            }
        }
    }//GEN-LAST:event_lyricListMouseClicked

    private void tagButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tagButtonActionPerformed
        int index = lyricList.getSelectedIndex();
        if (index != -1){
            LyricEvent event = (LyricEvent)lyricList.getModel().getElementAt(index);
            event.setTimeStamp(LyricTimeStamp.fromMillis((long)lyricPlayer.player.getCurrentTime().toMillis()));
        }
        index++;
        if (index < lyricList.getModel().getSize()){
            lyricList.setSelectedIndex(index);
            lyricList.scrollRectToVisible(lyricList.getCellBounds(index, index));
        }
    }//GEN-LAST:event_tagButtonActionPerformed

    private void metaInfoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_metaInfoButtonActionPerformed
        new LyricMetaInfoDialog(null, true, lyricPlayer.lrc).setVisible(true);
    }//GEN-LAST:event_metaInfoButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        if (lyricPlayer.lrcFile.exists() && JOptionPane.showConfirmDialog(
            this, "Confirm to override existed file?",
            "Confirm", JOptionPane.YES_NO_OPTION) == JOptionPane.NO_OPTION){
            return;
        }
        convertListModelToLyric();
        lyricPlayer.lrc.setMeta(LyricMetaType.EDITOR, "io.github.azige.lrcplayer");
        lyricPlayer.lrc.setMeta(LyricMetaType.VERSION, "0.1");
        try{
            LyricWriter out = new LyricWriter(new FileWriter(lyricPlayer.lrcFile));
            out.writeLyric(lyricPlayer.lrc);
            out.close();
        }catch (IOException ex){
            JOptionPane.showMessageDialog(this, ex.getLocalizedMessage());
            LOG.log(Level.WARNING, ex.getLocalizedMessage(), ex);
        }
    }//GEN-LAST:event_saveButtonActionPerformed

    private void rawLyricCallback(String rawLyric){
        LyricTimeStamp zero = LyricTimeStamp.fromMillis(0);
        DefaultListModel<LyricEvent> listModel = new DefaultListModel<>();
        Scanner scanner = new Scanner(rawLyric);
        while (scanner.hasNext()){
            String line = scanner.nextLine();
            listModel.addElement(new FormattedLyricEvent(zero, line));
        }
        lyricList.setModel(listModel);
    }

    public void converLyricToListModel(){
        Lyric lyric = lyricPlayer.lrc;
        if (lyric == null){
            lyric = new Lyric();
            lyricPlayer.lrc = lyric;
        }else{
            DefaultListModel<LyricEvent> listModel = new DefaultListModel<>();
            for (LyricEvent event : lyric.getEvents()){
                listModel.addElement(new FormattedLyricEvent(event.getTimeStamp(), event.getLyric()));
            }
            lyricList.setModel(listModel);
        }
    }

    public void convertListModelToLyric(){
        SortedSet<LyricEvent> events = lyricPlayer.lrc.getEvents();
        ListModel model = lyricList.getModel();
        events.clear();
        for (int i = 0; i < model.getSize(); i++){
            events.add((LyricEvent)model.getElementAt(i));
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton helpButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList lyricList;
    private javax.swing.JButton metaInfoButton;
    private javax.swing.JButton rawLyricButton;
    private javax.swing.JButton saveButton;
    private javax.swing.JButton tagButton;
    // End of variables declaration//GEN-END:variables
}
