/*
 * Copyright 2014 Azige.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.github.azige.lrcplayer;

import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;

import javax.swing.JFileChooser;
import javax.swing.Timer;

import javafx.embed.swing.JFXPanel;
import javafx.scene.media.Media;
import javafx.scene.media.MediaPlayer;

/**
 *
 * @author Azige
 */
public class LyricPlayer extends javax.swing.JFrame{

    private MediaPlayer player;
    private Timer timer;
    private Lyric lrc;
    private LyricTimeLine timeLine;
    private LyricEvent currentEvent;
    private final JFileChooser fileChooser;

    /**
     * Creates new form LyricPlayer
     */
    public LyricPlayer(){
        initComponents();
        // To init JavaFX
        new JFXPanel();
        fileChooser = new JFileChooser();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        playButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        lyricTextArea = new javax.swing.JTextArea();
        timeLabel = new javax.swing.JLabel();
        timeLineSlider = new javax.swing.JSlider();
        totalTimeLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        playButton.setText("Play");
        playButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playButtonActionPerformed(evt);
            }
        });

        lyricTextArea.setEditable(false);
        lyricTextArea.setColumns(20);
        lyricTextArea.setLineWrap(true);
        lyricTextArea.setRows(5);
        jScrollPane1.setViewportView(lyricTextArea);

        timeLabel.setText("00:00.00");

        timeLineSlider.setEnabled(false);

        totalTimeLabel.setText("00:00.00");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(172, Short.MAX_VALUE)
                .addComponent(playButton)
                .addGap(171, 171, 171))
            .addGroup(javax.swing.GroupLayout.Alignment.CENTER, layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jScrollPane1)
                .addGap(10, 10, 10))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(timeLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(timeLineSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(totalTimeLabel)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(timeLabel)
                    .addComponent(timeLineSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(totalTimeLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(playButton)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void playButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playButtonActionPerformed
        if (player == null){
            openMediaFile();
            player.play();
            int totalTime = (int)player.getTotalDuration().toMillis();
            totalTimeLabel.setText(LyricTimeStamp.fromMillis(totalTime).toString());
            timeLineSlider.setMaximum(totalTime);
            if (lrc != null){
                timeLine = new LyricTimeLine(lrc);
                timer = new Timer(10, e -> {
                    int time = (int)player.getCurrentTime().toMillis();
                    timeLine.setTime(time);
                    timeLineSlider.setValue(time);
                    timeLabel.setText(LyricTimeStamp.fromMillis(time).toString());
                    if (currentEvent != timeLine.getCurrentEvent()){
                        currentEvent = timeLine.getCurrentEvent();
                        lyricTextArea.setText(currentEvent.getLyric());
                    }
                });
                timer.start();
            }else{
                lyricTextArea.setText("歌词不可用");
            }
        }else{
            if (timer != null){
                timer.stop();
            }
            player.stop();
            player = null;
            lyricTextArea.setText("");
        }
    }//GEN-LAST:event_playButtonActionPerformed

    private void openMediaFile(){
        if (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION){
            File mediaFile = fileChooser.getSelectedFile();
            player = new MediaPlayer(new Media(mediaFile.toURI().toString()));
            File lrcFile = new File(mediaFile.getParentFile(), mediaFile.getName().replaceAll("\\.[^\\.]*$", "") + ".lrc");
            if (lrcFile.exists()){
                try{
                    lrc = new LyricReader(new InputStreamReader(new FileInputStream(lrcFile), "UTF-8")).readLyric();
                }catch (Exception ex){
                    lrc = null;
                    throw new RuntimeException(ex);
                }
            }else{
                lrc = null;
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]){
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try{
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()){
                if ("Nimbus".equals(info.getName())){
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        }catch (ClassNotFoundException ex){
            java.util.logging.Logger.getLogger(LyricPlayer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }catch (InstantiationException ex){
            java.util.logging.Logger.getLogger(LyricPlayer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }catch (IllegalAccessException ex){
            java.util.logging.Logger.getLogger(LyricPlayer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }catch (javax.swing.UnsupportedLookAndFeelException ex){
            java.util.logging.Logger.getLogger(LyricPlayer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable(){
            public void run(){
                new LyricPlayer().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea lyricTextArea;
    private javax.swing.JButton playButton;
    private javax.swing.JLabel timeLabel;
    private javax.swing.JSlider timeLineSlider;
    private javax.swing.JLabel totalTimeLabel;
    // End of variables declaration//GEN-END:variables
}
